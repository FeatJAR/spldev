import com.github.jengelman.gradle.plugins.shadow.transformers.XmlAppendingTransformer

plugins {
    id 'java'
    id 'test-report-aggregation'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'com.github.spotbugs' version '6.0.21'
}

repositories {
    mavenCentral()
}

group = 'de.featjar'
version = '1.0-SNAPSHOT'
jar.enabled = false

dependencies {
    file("..").eachDir { dir ->
        if (!(dir.name.equals("all")
                || dir.name.equals("gradle-plugins")
                || dir.name.startsWith("evaluation"))
            && dir.toPath().resolve('build.gradle').toFile().exists()) {
            implementation "de.featjar:${dir.name}"
        }
    }
}

def getIncludedBuilds() {
    gradle.includedBuilds.stream()
        .filter(build -> !build.name.equals('all'))
        .filter(build -> !build.name.startsWith('evaluation-'))
        .filter(build -> build.projectDir.toPath().resolve('build.gradle').toFile().text.contains('id \'de.featjar.'));
}

def getJavaSources() {
    getIncludedBuilds()
        .map(build -> build.projectDir)
        .map(projectDir -> file("../${projectDir.name}/src/main/java"))
        .filter(sourceDir -> sourceDir.exists())
        .toList();
}

project.tasks.register('allJavadoc', Javadoc) {
    javadocTool = javaToolchains.javadocToolFor {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.ORACLE
    }
    javadoc.options.addStringOption('Xdoclint:none', '-quiet')
    source {
        getJavaSources()
    }
    configurations.compileClasspath.each { part -> classpath += files(part) }
    destinationDir = file("${buildDir}/javadoc")
}

project.tasks.register('allJavadocJar', Jar) {
    dependsOn allJavadoc
    archiveBaseName.set('featjar')
    archiveClassifier.set('javadoc')
    from allJavadoc.destinationDir
}

project.tasks.register('allSources', Zip) {
    archiveBaseName.set('featjar')
    archiveClassifier.set('source')
    archiveVersion = project.version
    destinationDirectory.set(project.layout.buildDirectory.dir('libs'))
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        getJavaSources()
    }
}

shadowJar {
    archiveBaseName.set('featjar')
    transform(XmlAppendingTransformer.class) {
        resource = 'extensions.xml'
    }
    include '**/*.jar'     
    include 'bin/'     
    include '**/*.class'    
    include '**/extensions.xml'
}

tasks.named('test') {
    getIncludedBuilds().forEach { build ->
        dependsOn build.task(':test')
    }
    finalizedBy testAggregateTestReport
}

reporting {
    reports {
        testAggregateTestReport(AggregateTestReport) {
            testType = TestSuiteType.UNIT_TEST
        }
    }
}

project.tasks.named('spotbugsMain') {
    dependsOn assemble
    effort = com.github.spotbugs.snom.Effort.MAX
    reportLevel = com.github.spotbugs.snom.Confidence.valueOf('LOW')
    reports {
        xml.enabled = false
        html.enabled = true
        ignoreFailures = true
        html.stylesheet = 'fancy-hist.xsl'
        ArrayList<String> classList = new ArrayList<>();
        ArrayList<String> sourceList = new ArrayList<>();
        getIncludedBuilds().forEach { build ->
            classList.add("../" + build.projectDir.name + "/build/classes/java/main/")
            sourceList.add("../" + build.projectDir.name + "/src/main/java/")
        }
        classDirs = files(classList)
        sourceDirs = files(sourceList)
    }
}

project.tasks.named('spotbugsTest') {
    dependsOn test
    effort = com.github.spotbugs.snom.Effort.MAX
    reportLevel = com.github.spotbugs.snom.Confidence.valueOf('LOW')
    reports {
        xml.enabled = false
        html.enabled = true
        ignoreFailures = true
        html.stylesheet = 'fancy-hist.xsl'
        ArrayList<String> classList = new ArrayList<>();
        ArrayList<String> sourceList = new ArrayList<>();
        getIncludedBuilds().forEach { build ->
            classList.add("../" + build.projectDir.name + "/build/classes/java/test/")
            classList.add("../" + build.projectDir.name + "/build/classes/java/testFixtures/")
            sourceList.add("../" + build.projectDir.name + "/src/test/java/")
            sourceList.add("../" + build.projectDir.name + "/src/testFixtures/java/")
        }
        classDirs = files(classList)
        sourceDirs = files(sourceList)
    }
}

tasks.register('printReportLocations') {
    shouldRunAfter test, spotbugsMain, spotbugsTest, check, build, shadowJar, allSources, allJavadocJar
    doLast {
        String url1 = "file://" + project.buildDir + "/reports/tests/unit-test/aggregated-results/index.html"
        String url2 = "file://" + project.buildDir + "/reports/spotbugs/main.html"
        String url3 = "file://" + project.buildDir + "/reports/spotbugs/test.html"
        println "See the reports at:\n\u001B]8;;${url1}\u001B\\${url1}\u001B]8;;\u001B\\\n\u001B]8;;${url2}\u001B\\${url2}\u001B]8;;\u001B\\\n\u001B]8;;${url3}\u001B\\${url3}\u001B]8;;\u001B\\"
    }
}

project.tasks.named('build') {
    finalizedBy shadowJar, allSources, allJavadocJar
}

tasks.named('check') {
    dependsOn test
    finalizedBy printReportLocations
}

