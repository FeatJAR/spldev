def registerTaskForRepo(taskName) {
    tasks.register(taskName) {
        group = 'Format'
        gradle.includedBuilds.stream()
        .filter(build -> build.projectDir.toPath().resolve('build.gradle').toFile().text.contains('id \'de.featjar.'))
        .filter(build -> !build.projectDir.name.equals('all'))
        .forEach(build -> dependsOn build.task(":$taskName"))
    }
}

def registerTaskForEveryRepo(taskName) {
    tasks.register(taskName) {
        group = 'Build'
        gradle.includedBuilds.stream()
        .filter(build -> build.projectDir.name.equals('gradle-plugins') || build.projectDir.toPath().resolve('build.gradle').toFile().text.contains('id \'de.featjar.'))
        .forEach(build -> dependsOn build.task(":$taskName"))
    }
}

// pass common tasks through to included builds
['licenseFormatMain', 'licenseFormatTest', 'spotlessApply', 'publishToMavenLocal', 'release'].each { registerTaskForRepo it }

['assemble', 'build', 'clean'].each { registerTaskForEveryRepo it }

tasks.register('format') {
    group = 'Format'
    finalizedBy spotlessApply, licenseFormatMain, licenseFormatTest
}

tasks.register('check') {
    group = 'Check'
    gradle.includedBuilds.stream()
        .filter(build -> build.projectDir.name.equals('all'))
        .forEach(build -> dependsOn build.task(":check"))
}

tasks.register('test') {
    group = 'Check'
    gradle.includedBuilds.stream()
        .filter(build -> build.projectDir.name.equals('all'))
        .forEach(build -> dependsOn build.task(":test"))
}
